{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","i","console","log","state","cardsStatus","newStatus","slice","fill","index","length","setState","addKitten","prevState","addCard","totalCards","Array","removeCard","cardsArray","push","react_default","a","createElement","App_Card","number","active","key","image","className","id","onClick","rendercard","Component","defaultProps","Card","_this2","backgroundImage","_this3","style","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d0bc6ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n    totalCards  : props.totalCards,\n    cardsStatus : Array(props.totalCards).fill(false),\n    addKitten   : false\n    };\n  \n}\n\n //loop to render cards\nrendercard(i,cardsStatus) {\n\n    const cardsArray = [];\n        for (let index = 0; index < i; index++) {\n          \n    cardsArray.push(<Card number = {index+1} active = {cardsStatus[index]} handleClick={this.handleClick} key={index}\n       image={\"url(http://placekitten.com/250/350?image=\"+index+\")\"}\n       addKitten = {this.state.addKitten}\n       />)\n          \n                       \n        }\n        \n        return cardsArray;\n  }\n\n//saves state of active card in array \nhandleClick = (i) => {\n\n  console.log(this.state.cardsStatus)\n\n  const newStatus = this.state.cardsStatus.slice();\n  \n  if (newStatus[i]) {\n     newStatus.fill(false);\n  }\n  else {\n     for (let index = 0; index < newStatus.length; index++) {\n      newStatus[index] = (index === i) ? true : false;    \n    }\n  }\n  this.setState({cardsStatus : newStatus})\n\n}\n\n//changes status to show/hide kitten pics\n addKitten = (prevState) => {\n  // this.setState({addKitten : true});\n  this.setState(prevState => ({\n    addKitten: !prevState.addKitten\n  }));\n  console.log(this.state.addKitten)\n\n }\n\n //adds new card by changing cardsStatus array \n addCard = (prevState) => {\n  \n  this.setState(prevState => ( {\n    totalCards : prevState.totalCards+1,\n    cardsStatus : Array(prevState.totalCards+1).fill(false)\n  }));\n  \n }\n\n //same as addCard() but only removes one card from array instead of adding\n removeCard = (prevState) => {\n  if (this.state.totalCards > 0) {\n  this.setState(prevState => ( {\n    totalCards : prevState.totalCards-1,\n    cardsStatus : Array(prevState.totalCards-1).fill(false)\n   }));\n  }\n }\n \n //main render function\n render() {\n   console.log(this.state.totalCards);\n    return (\n      <div>\n        <div>\n          <div className=\"card\" id=\"controlPanel\">\n          \n            <button onClick = {this.addKitten} className=\"kitBtn\">Add / remove Kittens</button>\n            <p>Add/Remove Cards</p>\n            <button onClick={this.addCard} className =  \"addBtn\">+</button>\n            <button onClick={this.removeCard} className =  \"addBtn\" >-</button>\n            \n          </div>\n          {this.rendercard(this.state.totalCards,this.state.cardsStatus)}\n        </div>\n        \n        \n\n      </div>\n\n      \n    )\n  }\n}\n\n\nApp.defaultProps = {\n  totalCards : 6  \n}\n\n\n//card component\nclass Card extends Component {\n  constructor(props){\n    super(props);\n    this.image = \"\";\n    this.state = {\n      active : false\n    }\n  }\n\n  //changes state if kitten images are required \n  backgroundImage = () => {\n    \n    if (!this.props.active && this.props.state.addKitten) {\n      this.image = \"url(\"+this.props.image+\")\"\n    }\n    else \n      this.image = null;\n\n      return this.image;\n  }\n\n    \n  //card render\n\n  render() {\n    return (\n      <button className=\"card\" \n      id= {this.props.active ? \"activeCard\" : \"inActiveCard\"} \n      onClick = {() => (this.props.handleClick(this.props.number-1))} \n      \n      style = {(!this.props.active && this.props.addKitten)  ? {backgroundImage : this.props.image } : {}}>\n      \n           \n      \n      <h1>{this.props.active ? this.props.number : \"\"}</h1>\n       </button>\n    )\n  }\n}\n\n\n\n\n\n\n//class App extends Component {\n  //render() {\n    //return (\n      //<div className=\"App\">\n        //<header className=\"App-header\">\n          //<img src={logo} className=\"App-logo\" alt=\"logo\" />\n          //<p>\n            //Edit <code>src/App.js</code> and save to reload.\n          //</p>\n          //<a\n            //className=\"App-link\"\n            //href=\"https://reactjs.org\"\n            //target=\"_blank\"\n            //rel=\"noopener noreferrer\"\n          //>\n            //Learn React\n          //</a>\n        //</header>\n      //</div>\n    //);\n  //}\n//}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}